# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q_9fpjgnoqZjfEVOiq7A54Tjpi8migEm
"""

pip install nltk

import nltk
nltk.download('punkt')

import pandas as pd

fake = pd.read_csv("Fake.csv")
genuine=pd.read_csv("True.csv")

display(fake.info())

display(genuine.info())

display(genuine.head())

display(fake.head())

display(fake.subject.value_counts())

display(genuine.subject.value_counts())

fake['target']=0
genuine['target']=1

display(genuine.head())

display(fake.head())

data=pd.concat([fake,genuine],axis=0)

data=data.reset_index(drop=True)#error free index

data=data.drop(['subject','date','title'],axis=1)

print(data.columns)

"""TOKENIZE"""

from nltk.tokenize import word_tokenize

data['text']=data['text'].apply(word_tokenize)

print(data.head())

"""STEMMING

"""

from nltk.stem.snowball import SnowballStemmer
porter=SnowballStemmer('english')

def stem_it(text):
  return [porter.stem(word) for word in text]

data['text']=data['text'].apply(stem_it)

display(data.head())

"""**STOPWARD** **REMOVAL**"""

#from nltk.corpus import stopwards
#nltk.download('stopwords)
#print(stopwords.word('english))

def stop_it(t):
  dt=[word for word in t if len(word)>2]
  return dt

data['text']=data['text'].apply(stop_it)

print(data['text'].head(10))

data['text']=data['text'].apply(' '.join)

"""SPLITTING

"""

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(data['text'],data['target'],test_size=0.25)
display(X_train.head())
print('\n')
display(Y_train.head())

"""VECTORIZATION"""

from sklearn.feature_extraction.text import TfidfVectorizer
my_tfidf =TfidfVectorizer(max_df=0.7)
tfidf_train=my_tfidf.fit_transform(X_train)
tfidf_test=my_tfidf.transform(X_test)

print(tfidf_train)

"""**LOGISTIC** **REGRESSION**"""

from sklearn.linear_model import LogisticRegression
#from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

model_1=LogisticRegression(max_iter=900)
model_1.fit(tfidf_train,Y_train)
pred_1=model_1.predict(tfidf_test)
cr1=accuracy_score(Y_test,pred_1)
print(cr1*100)

"""PASSIVE AGRESSIVE CLASSIFIER"""

from sklearn.linear_model import PassiveAggressiveClassifier
model=PassiveAggressiveClassifier(max_iter=50)
model.fit(tfidf_train,Y_train)
y_pred=model.predict(tfidf_test)
cr2=accuracy_score(Y_test,y_pred)
print(cr2*100)

